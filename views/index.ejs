<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real Time Device Tracking</title>
    <link rel="icon" type="image/png" href="/favicon.ico" />
    <meta name="theme-color" content="#667eea" />
    <meta
      name="description"
      content="A modern real-time device tracking app with authentication and live location sharing."
    />
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="/css/style.css" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css"
    />
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Service Worker Registration -->
    <script>
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker
          .register("/service-worker.js")
          .then(function (reg) {
            console.log("Service Worker registered!", reg);
          })
          .catch(function (err) {
            console.error("Service Worker registration failed:", err);
          });
      }
    </script>
  </head>

  <body>
    <!-- Authentication Container -->
    <div id="auth-container">
      <div class="auth-section">
        <h2>Welcome Back</h2>
        <form id="login-form">
          <div class="input-group">
            <input
              type="text"
              id="login-username"
              placeholder="Enter your username"
              required
              autocomplete="username"
            />
          </div>
          <div class="input-group">
            <input
              type="password"
              id="login-password"
              placeholder="Enter your password"
              required
              autocomplete="current-password"
            />
          </div>
          <button type="submit">
            <span class="btn-text">Sign In</span>
          </button>
        </form>
        
        <div class="divider">
          <span>or</span>
        </div>
        
        <h2>Create Account</h2>
        <form id="register-form">
          <div class="input-group">
            <input
              type="text"
              id="register-username"
              placeholder="Choose a username"
              required
              autocomplete="username"
            />
          </div>
          <div class="input-group">
            <input
              type="password"
              id="register-password"
              placeholder="Create a password"
              required
              autocomplete="new-password"
            />
          </div>
          <button type="submit">
            <span class="btn-text">Create Account</span>
          </button>
        </form>
        
        <div id="auth-message"></div>
      </div>
    </div>

    <!-- Map Container -->
    <div id="map" style="display: none" role="application" aria-label="Interactive map showing device locations"></div>

    <!-- Control Buttons -->
    <button
      id="logout-btn"
      class="control-btn"
      style="display: none;"
      aria-label="Logout from application"
    >
      <span>Logout</span>
    </button>
    
    <button
      id="recenter-btn"
      class="control-btn"
      style="display: none;"
      aria-label="Center map on your location"
    >
      <span>üìç Center</span>
    </button>
    
    <button
      id="alert-btn"
      class="control-btn"
      style="display: none;"
      aria-label="Send emergency alert to nearby users"
    >
      <span>üö® Alert</span>
    </button>

    <!-- Scripts -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://cdn.socket.io/4.8.1/socket.io.min.js"
      crossorigin="anonymous"
    ></script>
    
    <script>
      // Enhanced form handling with loading states
      function setButtonLoading(button, isLoading) {
        const btnText = button.querySelector('.btn-text');
        if (isLoading) {
          btnText.innerHTML = '<span class="loading-spinner"></span> Loading...';
          button.disabled = true;
        } else {
          btnText.textContent = button.closest('#login-form') ? 'Sign In' : 'Create Account';
          button.disabled = false;
        }
      }

      // Handle login with enhanced UX
      document
        .getElementById("login-form")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const button = this.querySelector('button');
          const username = document.getElementById("login-username").value;
          const password = document.getElementById("login-password").value;
          
          setButtonLoading(button, true);
          
          try {
            const res = await fetch("/login", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ username, password }),
            });
            const data = await res.json();
            
            if (data.token) {
              localStorage.setItem("token", data.token);
              localStorage.setItem("username", username);
              
              // Smooth transition to map
              document.getElementById("auth-container").style.opacity = "0";
              setTimeout(() => {
                document.getElementById("auth-container").style.display = "none";
                document.getElementById("map").style.display = "block";
                document.getElementById("logout-btn").style.display = "block";
                document.getElementById("recenter-btn").style.display = "block";
                document.getElementById("alert-btn").style.display = "block";
                loadMapScript();
              }, 300);
            } else {
              document.getElementById("auth-message").innerText =
                data.error || "Login failed";
            }
          } catch (error) {
            document.getElementById("auth-message").innerText =
              "Network error. Please try again.";
          } finally {
            setButtonLoading(button, false);
          }
        });

      // Handle register with enhanced UX
      document
        .getElementById("register-form")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const button = this.querySelector('button');
          const username = document.getElementById("register-username").value;
          const password = document.getElementById("register-password").value;
          
          setButtonLoading(button, true);
          
          try {
            const res = await fetch("/register", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ username, password }),
            });
            const data = await res.json();
            
            if (data.message && data.message.includes("successful")) {
              document.getElementById("auth-message").innerHTML = 
                '<div style="color: #4facfe; background: rgba(79, 172, 254, 0.1); border-color: rgba(79, 172, 254, 0.2);">Registration successful! Please sign in above.</div>';
              // Clear register form
              document.getElementById("register-username").value = "";
              document.getElementById("register-password").value = "";
            } else {
              document.getElementById("auth-message").innerText =
                data.error || "Registration failed";
            }
          } catch (error) {
            document.getElementById("auth-message").innerText =
              "Network error. Please try again.";
          } finally {
            setButtonLoading(button, false);
          }
        });

      // Dynamically load the map script after authentication
      function loadMapScript() {
        const leafletRouteScript = document.createElement("script");
        leafletRouteScript.src =
          "https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.min.js";
        document.body.appendChild(leafletRouteScript);

        leafletRouteScript.onload = () => {
          const script = document.createElement("script");
          script.src = "/js/script.js";
          document.body.appendChild(script);
        };
      }

      // Auto-login if token exists
      window.onload = function () {
        if (localStorage.getItem("token")) {
          document.getElementById("auth-container").style.display = "none";
          document.getElementById("map").style.display = "block";
          document.getElementById("logout-btn").style.display = "block";
          document.getElementById("recenter-btn").style.display = "block";
          document.getElementById("alert-btn").style.display = "block";
          loadMapScript();
        }
      };

      // Enhanced logout functionality
      document.getElementById("logout-btn").onclick = function () {
        // Smooth transition
        document.getElementById("map").style.opacity = "0";
        setTimeout(() => {
          localStorage.removeItem("token");
          localStorage.removeItem("username");
          document.getElementById("map").style.display = "none";
          document.getElementById("logout-btn").style.display = "none";
          document.getElementById("recenter-btn").style.display = "none";
          document.getElementById("alert-btn").style.display = "none";
          document.getElementById("auth-container").style.display = "block";
          document.getElementById("auth-container").style.opacity = "1";
          location.reload();
        }, 300);
      };

      // Clear auth message when user starts typing
      document.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', () => {
          document.getElementById("auth-message").innerText = "";
        });
      });
    </script>

    <style>
      /* Additional inline styles for enhanced UX */
      .divider {
        margin: 1.5rem 0;
        text-align: center;
        position: relative;
        color: var(--text-muted);
        font-size: 0.9rem;
      }
      
      .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--border-color);
      }
      
      .divider span {
        background: var(--bg-primary);
        padding: 0 1rem;
        position: relative;
      }
      
      .auth-section {
        position: relative;
        z-index: 1;
      }
      
      button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none !important;
      }
      
      .btn-text {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
      }
      
      #auth-container {
        transition: opacity 0.3s ease;
      }
      
      #map {
        transition: opacity 0.3s ease;
      }
    </style>
  </body>
</html>